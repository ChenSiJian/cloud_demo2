<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<groupId>com.example</groupId>
	<artifactId>eureka-server</artifactId>
	<version>0.0.1-SNAPSHOT</version>
    <packaging>jar</packaging>
	<name>eureka-server</name>
	<description>Demo project for Spring Boot</description>

	<parent>
		<groupId>cn.csj</groupId>
		<artifactId>springcloudDemo</artifactId>
		<version>0.0.1-SNAPSHOT</version>
	</parent>


	<dependencies>
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-netflix-eureka-server</artifactId>
		</dependency>
	</dependencies>


	<build>
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
			</plugin>
			<plugin>

				<groupId>com.spotify</groupId>
				<artifactId>docker-maven-plugin</artifactId>
				<version>0.4.3</version>
				<!--将插件绑定在某个phase执行-->
				<executions>
					<execution>
						<id>build-image</id>
						<!--将插件绑定在package这个phase上。也就是说，用户只需执行mvn package ，就会自动执行mvn docker:build-->
						<phase>package</phase>
						<goals>
							<goal>build</goal>
						</goals>
					</execution>
				</executions>
				<!-- tag::plugin[] -->
				<configuration>
					<!--指定生成的镜像名-->
					<imageName>eureka-server</imageName>
					<!--指定标签-->
					<imageTags>
						<imageTag>latest</imageTag>
					</imageTags>
					<!-- 指定 Dockerfile 路径-->
					<dockerDirectory>${project.basedir}/bin/docker</dockerDirectory>

					<!--指定远程 docker api地址-->
					<dockerHost>http://119.23.43.137:2375</dockerHost>

					<!-- 这里是复制 jar 包到 docker 容器指定目录配置 -->
					<resources>
						<resource>
							<targetPath>/</targetPath>
							<!--jar 包所在的路径  此处配置的 即对应 target 目录-->
							<directory>${project.build.directory}</directory>
							<!-- 需要包含的 jar包 ，这里对应的是 Dockerfile中添加的文件名　-->
							<include>${project.build.finalName}.jar</include>
						</resource>
					</resources>
					<!-- 以下两行是为了docker push到DockerHub使用的。 -->
					<!--<serverId>docker-hub</serverId>
                    <registryUrl>https://index.docker.io/v1</registryUrl>-->
					<!--<serverId>deploymentRepo</serverId>-->
				</configuration>
				<!-- end::plugin[] -->
			</plugin>

		</plugins>
	</build>



</project>
